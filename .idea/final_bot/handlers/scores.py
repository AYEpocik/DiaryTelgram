from aiogram import Router, types, F # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ä–æ—É—Ç–µ—Ä–∞, —Ç–∏–ø—ã –∏ MagicFilter
from aiogram.filters import Text # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–µ–∫—Å—Ç–∞
from aiogram.fsm.context import FSMContext # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–µ—á–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã

from keyboards.reply_kb import main_menu_keyboard, main_menu_buttons # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from keyboards.inline_kb import get_subject_kb # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
from data.bot_states import ConvertingPoints # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from data.consts_and_vars import TOKEN, DB_PATH, all_surnames, school_subjects, school_subjects_in_dp, get_second_scores, first_to_second # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ


router = Router()


@router.message(Text('–ü–µ—Ä–µ–≤–æ–¥ –±–∞–ª–ª–æ–≤ –ï–ì–≠üíØ'))
async def get_subject(message: types.Message, state: FSMContext) -> None:
    global max_points, subject
    max_points = 0
    subject = ''
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ', reply_markup=get_subject_kb())
    await state.set_state(ConvertingPoints.chose_a_subject)

@router.callback_query(ConvertingPoints.chose_a_subject)
async def get_primary_points(callback: types.callback_query, state: FSMContext) -> None:
    global max_points, subject
    max_points = len(get_second_scores(callback.data))
    subject = callback.data
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤ {school_subjects_in_dp[subject]} –æ—Ç 0 –¥–æ {max_points}.')
    await callback.answer()
    await state.set_state(ConvertingPoints.waiting_points)

@router.message(
    ConvertingPoints.waiting_points,
    F.text,
    ~(F.text.in_(main_menu_buttons))
)
async def send_sec_points(message: types.Message, state: FSMContext) -> None:
    try:
        points = int(message.text)
        if points == 0:
            await message.answer('0 ‚Üí 0')
        elif points in range(max_points):
            await message.answer(f'{points} ‚Üí {first_to_second(subject, points)}')
        elif points == max_points:
            await message.answer(f'{points} ‚Üí 100')
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
    except ValueError:
        await message.answer('–ú–æ–∂–Ω–æ —Ü–∏—Ñ–∏—Ä–∫–∞–º–∏?')
